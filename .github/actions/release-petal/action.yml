name: release-petal
description: "action used to release petal's fork artifacts"

inputs:
  goVersionFile:
    required: true
    type: string
  javaVersion:
    required: true
    type: string
  version:
    required: true
    type: string
  # Make sure to treat the below values confidential (ie, not logging)
  secretGithubToken:
    required: true
  # Registry credentials?
  # secretDockerHubUser:
  #   required: true
  # secretDockerHubPassword:
  #   required: true

runs:
  using: "composite"

  steps:

    - name: Set up JDK ${{ inputs.javaVersion }}
      uses: actions/setup-java@v3
      with:
        java-version: ${{ inputs.javaVersion }}
        distribution: "temurin"

    - name: Install Go ${{ inputs.goVersionFile }}
      uses: actions/setup-go@v4
      with:
        go-version-file: ${{ inputs.goVersionFile }}
        check-latest: true

    - name: Get version and update date
      shell: bash
      run: |
        echo "VERSION=${{ inputs.version }}" >> $GITHUB_ENV
        echo "UPD_DATE=$(date)" >> $GITHUB_ENV

    - name: Global Env
      shell: bash
      run: |
        echo "Using VERSION=${{ env.VERSION }}"
        cd petal
        IMAGE_NAME=$(make get-image-name)
        echo "Using IMAGE_NAME=$IMAGE_NAME"
        echo "IMAGE_NAME=$IMAGE_NAME" >> $GITHUB_ENV

    - name: Install newer docker CLI supporting multi platform build
      shell: bash
      run: |
        sudo apt-get update
        sudo apt-get install ca-certificates curl gnupg
        sudo install -m 0755 -d /etc/apt/keyrings
        curl -fsSL https://download.docker.com/linux/ubuntu/gpg | sudo gpg --dearmor -o /etc/apt/keyrings/docker.gpg
        sudo chmod a+r /etc/apt/keyrings/docker.gpg
        echo \
        "deb [arch="$(dpkg --print-architecture)" signed-by=/etc/apt/keyrings/docker.gpg] https://download.docker.com/linux/ubuntu \
        "$(. /etc/os-release && echo "$VERSION_CODENAME")" stable" | \
        sudo tee /etc/apt/sources.list.d/docker.list > /dev/null
        sudo apt-get update
        sudo apt-get install docker-ce docker-ce-cli containerd.io docker-buildx-plugin docker-compose-plugin

    - name: Set up QEMU (required by multi platform build)
      uses: docker/setup-qemu-action@v2

    # - name: Login to Container Registry
    #   uses: docker/login-action@v2
    #   with:
    #     username: ${{ inputs.secretDockerHubUser }}
    #     password: ${{ inputs.secretDockerHubPassword }}

    - name: Build and release containers
      shell: bash
      run: |
        # There is a test which assumes that we will not
        # get rate limited but in fact we are when building from a fork. Removing
        # GITHUB_TOKEN will skip the test
        # See ./pkg/kamelet/repository/github_repository_test.go
        GITHUB_TOKEN="" make VERSION=${{ env.VERSION }} IMAGE_NAME=${{ env.IMAGE_NAME }} images-nightly
        GITHUB_TOKEN="" make IMAGE_ARCH=arm64 VERSION=${{ env.VERSION }} IMAGE_NAME=${{ env.IMAGE_NAME }} images-nightly
        echo make VERSION=${{ env.VERSION }} IMAGE_NAME=${{ env.IMAGE_NAME }} release-nightly

    - name: Generate SBOM
      uses: ./.github/actions/gh-go-mod-generate-sbom
      with:
        version: v1
        args: mod -licenses -json -output sbom.json

    - name: Create Release
      id: create_release
      uses: ncipollo/release-action@58ae73b360456532aafd58ee170c045abbeaee37
      with:
        artifacts: "./camel-k-client*.tar.gz,sbom.json"
        body: |
          Apache Camel K ${{ env.VERSION }} build for Petal

          NOTE: last updated on ${{ env.UPD_DATE }}
        token: ${{ inputs.secretGithubToken }}
        draft: false
        prerelease: true
        allowUpdates: true
        replacesArtifacts: true
        tag: ${{ env.VERSION }}
        commit: main
